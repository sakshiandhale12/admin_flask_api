from .extensions import db 
# from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from .extensions import db

class EppsHrShProfileHdr(db.Model):
    prof_hdr_sr_no = db.Column(db.Integer, primary_key=True)
    comp_cd = db.Column(db.SmallInteger)
    div_cd = db.Column(db.SmallInteger)
    prof_disp_name = db.Column(db.String(50), nullable=True)
    prof_long_name = db.Column(db.String(100), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)

class EppsHrEmpMst(db.Model):
    __tablename__ = 'epps_hr_emp_mst'
    __table_args__ = {'schema': 'epps_hrms'}
    comp_cd = db.Column(db.Integer, primary_key=True)
    div_cd = db.Column(db.SmallInteger)
    emp_cd = db.Column(db.String(10))
    emp_title = db.Column(db.String(10), nullable=True)
    emp_first_name = db.Column(db.String(50))
    emp_middle_name = db.Column(db.String(50), nullable=True)
    emp_last_name = db.Column(db.String(50), nullable=True)
    emp_category = db.Column(db.String(15), nullable=True)
    emp_desig = db.Column(db.String(30), nullable=True)
    emp_qualification = db.Column(db.SmallInteger, nullable=True)
    date_of_join = db.Column(db.DateTime, nullable=True)
    date_of_leaving = db.Column(db.DateTime, nullable=True)
    dept_cd = db.Column(db.SmallInteger)
    role_cd = db.Column(db.SmallInteger, nullable=True)
    prof_hdr_sr_no = db.Column(db.Integer, db.ForeignKey('epps_hr_sh_profile_hdr.prof_hdr_sr_no'), nullable=True)
    emp_job_nature = db.Column(db.String(30), nullable=True)
    emp_mob_no = db.Column(db.String(50), nullable=True)
    emp_mail_id = db.Column(db.String(50), nullable=True)
    emp_password = db.Column(db.String(100))
    emp_dob = db.Column(db.Date, nullable=True)
    emp_gender = db.Column(db.String(10), nullable=True)
    maritial_status = db.Column(db.String(10), nullable=True)
    pan_no = db.Column(db.String(15), nullable=True)
    pf_no = db.Column(db.String(25), nullable=True)
    esic_no = db.Column(db.String(25), nullable=True)
    emp_blood_grp = db.Column(db.String(5), nullable=True)
    emp_id_proof = db.Column(db.String(100), nullable=True)
    med_fitness = db.Column(db.String(100), nullable=True)
    remarks = db.Column(db.String(50), nullable=True)
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    file_upload_sr_no = db.Column(db.Integer, nullable=True)
    emp_uan_no = db.Column(db.String(25), nullable=True)
    work_loc = db.Column(db.String(100), nullable=True)
    emp_type = db.Column(db.String(1))
    emp_level_cd = db.Column(db.String(2), nullable=True)
    emp_prv_exp = db.Column(db.Numeric(precision=65535, scale=65535), nullable=True)
    partner_loc_cd = db.Column(db.SmallInteger, nullable=True)
    partner_role_cd = db.Column(db.SmallInteger, nullable=True)
    emp_emerg_cont_name1 = db.Column(db.String(100), nullable=True)
    emp_emerg_cont_relation1 = db.Column(db.String(50), nullable=True)
    emp_emerg_cont_number1 = db.Column(db.String(15), nullable=True)
    emp_emerg_cont_name2 = db.Column(db.String(100), nullable=True)
    emp_emerg_cont_relation2 = db.Column(db.String(50), nullable=True)
    emp_emerg_cont_number2 = db.Column(db.String(15), nullable=True)
    auto_created = db.Column(db.SmallInteger, nullable=True)
    partner_cd = db.Column(db.String(10), nullable=True)
    file_path = db.Column(db.String(255), nullable=True)
    file_name = db.Column(db.String(100), nullable=True)
    ref_emp_id = db.Column(db.String(100), nullable=True)
    client_upload_flag = db.Column(db.SmallInteger, nullable=True)
    telegram_chat_id = db.Column(db.String, nullable=True)
    id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    enabled = db.Column(db.SmallInteger, nullable=True)
    accountnonexpired = db.Column(db.SmallInteger, nullable=True)
    credentialsnonexpired = db.Column(db.SmallInteger, nullable=True)
    accountnonlocked = db.Column(db.SmallInteger, nullable=True)
    password = db.Column(db.String(200), nullable=True)
    def __repr__(self):
        return f"EppsHrEmpMst(comp_cd={self.comp_cd}, emp_cd={self.emp_cd})"

class EppsHrProjectResLnk(db.Model):
    __tablename__ = 'epps_hr_project_res_lnk'
    __table_args__ = {'schema': 'epps_admin'}    
    comp_cd = db.Column(db.Integer, primary_key=True)
    div_cd = db.Column(db.SmallInteger)
    account_cd = db.Column(db.SmallInteger, nullable=True)
    project_cd = db.Column(db.SmallInteger)
    emp_cd = db.Column(db.String(10))
    from_date = db.Column(db.Date, nullable=True)
    to_date = db.Column(db.Date, nullable=True)
    reporting_empcd = db.Column(db.String(50), nullable=True)
    open_flag = db.Column(db.String(1))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)

    def __repr__(self):
        return f"<EppsHrProjectResLnk(comp_cd={self.comp_cd}, div_cd={self.div_cd}, project_cd={self.project_cd}, emp_cd={self.emp_cd})>"

class EppsBusinessZoneMst(db.Model):
    __tablename__ = 'epps_business_zone_mst'
    __table_args__ = {'schema': 'epps_admin'}    
    comp_cd = db.Column(db.Integer, primary_key=True)
    div_cd = db.Column(db.SmallInteger, primary_key=True)
    bus_zone_cd = db.Column(db.String(25), primary_key=True)
    bus_zone_disp_name = db.Column(db.String(50))
    bus_zone_long_name = db.Column(db.String(100), nullable=True)
    parent_bus_zone_cd = db.Column(db.String(25), nullable=True)
    bus_level_flag = db.Column(db.String(1))
    address_details = db.Column(db.String(255), nullable=True)
    city_cd = db.Column(db.SmallInteger, nullable=True)
    state_cd = db.Column(db.SmallInteger, nullable=True)
    country_cd = db.Column(db.SmallInteger, nullable=True)
    created_dt = db.Column(db.DateTime)
    created_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    terminal_id = db.Column(db.String(100), nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)

    def __repr__(self):
        return f"<EppsBusinessZoneMst(comp_cd={self.comp_cd}, div_cd={self.div_cd}, bus_zone_cd={self.bus_zone_cd})>"


class EppsEcodeMst(db.Model):
    __tablename__ = 'epps_ecode_mst'
    __table_args__ = {'schema': 'epps_admin'}    

    comp_cd = db.Column(db.Integer, primary_key=True)
    div_cd = db.Column(db.SmallInteger, primary_key=True)
    ecode = db.Column(db.String(5), primary_key=True)
    tran_indicator = db.Column(db.String(20), nullable=True)
    tran_indicator_type = db.Column(db.String(25), nullable=True)
    bin_indicator = db.Column(db.String(1), nullable=True)
    stock_report_yn = db.Column(db.String(1), nullable=True)
    stock_report_ip_effect = db.Column(db.SmallInteger, nullable=True)
    stock_report_op_effect = db.Column(db.SmallInteger, nullable=True)
    post_fas_voucher = db.Column(db.String(1), nullable=True)
    fas_voucher_type = db.Column(db.String(10), nullable=True)
    db_gl_cd = db.Column(db.Integer, nullable=True)
    db_sl_cd = db.Column(db.String(7), nullable=True)
    cr_gl_cd = db.Column(db.Integer, nullable=True)
    cr_sl_cd = db.Column(db.String(7), nullable=True)
    frt_applicable_yn = db.Column(db.String(1), nullable=True)
    frt_bpa_effect = db.Column(db.String(15), nullable=True)
    sbct_57f4_flag = db.Column(db.String(1), nullable=True)
    sbct_process_flag = db.Column(db.String(1), nullable=True)
    sbct_grn_flag = db.Column(db.String(5), nullable=True)
    mob_noti_approver = db.Column(db.String(1), nullable=True)
    mob_noti_requestor = db.Column(db.String(1), nullable=True)
    default_access_flag = db.Column(db.String(1), nullable=True)
    remarks = db.Column(db.String(100), nullable=True)
    audit_doc_id = db.Column(db.String(100), nullable=True)
    audit_doc_dt = db.Column(db.Date, nullable=True)
    tree_cd = db.Column(db.SmallInteger, nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    web_noti_approver = db.Column(db.String(1), nullable=True)
    web_noti_requestor = db.Column(db.String(1), nullable=True)
    self_approval = db.Column(db.String(1), nullable=True, info={'comment': 'Set it (Y) If Creator is Approver, (N) Creator is not Approver .'})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    credit_management_applicable = db.Column(db.String(1), nullable=True)
    item_tran_tax = db.Column(db.String(1), nullable=True)
    item_rt_flag = db.Column(db.String(2), nullable=True)
    item2emp_link_flag = db.Column(db.String(1), nullable=True)
    item2cust_link_flag = db.Column(db.String(1), nullable=True)
    item2supp_link_flag = db.Column(db.String(1), nullable=True)
    pre_printed_rep_yn = db.Column(db.String(1), nullable=True)
    email_yn = db.Column(db.SmallInteger, nullable=True)
    sms_yn = db.Column(db.SmallInteger, nullable=True)
    supp_batch_flag = db.Column(db.SmallInteger, nullable=True, info={'comment': '0 - Not showing Supp_batch_no on screen(GRN)     1 - Capture but not mandatory    2 - Mandatory'})
    iss_for_resv_stock = db.Column(db.String(1), nullable=True)
    ecode_level_doc_no_string = db.Column(db.String(5), nullable=True)
    bkdate_control_days = db.Column(db.SmallInteger, nullable=True)
    frt_gl_cd = db.Column(db.Integer, nullable=True)
    frt_sl_cd = db.Column(db.String(7), nullable=True)

    def __repr__(self):
        return f"EppsEcodeMst(comp_cd={self.comp_cd}, div_cd={self.div_cd}, ecode={self.ecode})"


class EppsCityMst(db.Model):
    __tablename__ = 'epps_city_mst'
    __table_args__ = {'schema': 'epps_admin'}    

    comp_cd = db.Column(db.Integer, db.ForeignKey('epps_state_mst.comp_cd'), primary_key=True)
    country_cd = db.Column(db.SmallInteger, primary_key=True)
    state_cd = db.Column(db.SmallInteger, primary_key=True)
    city_cd = db.Column(db.SmallInteger, primary_key=True)
    city_nm = db.Column(db.String(50), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)

    def __repr__(self):
        return f"EppsCityMst(comp_cd={self.comp_cd}, country_cd={self.country_cd}, state_cd={self.state_cd}, city_cd={self.city_cd})"



class EppsCompanyMst(db.Model):
    __tablename__ = 'epps_company_mst'
    __table_args__ = {'schema': 'epps_admin'}    
    comp_cd = db.Column(db.Integer, primary_key=True)
    comp_disp_name = db.Column(db.String(50), unique=True)
    comp_long_name = db.Column(db.String(255))
    add1 = db.Column(db.String(50))
    add2 = db.Column(db.String(50))
    add3 = db.Column(db.String(50))
    city_cd = db.Column(db.SmallInteger)
    pin = db.Column(db.String(10))
    country_cd = db.Column(db.SmallInteger)
    state_cd = db.Column(db.SmallInteger)
    tel_no1 = db.Column(db.String(25))
    tel_no2 = db.Column(db.String(25))
    fax_no1 = db.Column(db.String(20))
    fax_no2 = db.Column(db.String(25))
    website = db.Column(db.String(100))
    mail_id = db.Column(db.String(100))
    r_off_add1 = db.Column(db.String(50))
    r_off_add2 = db.Column(db.String(50))
    r_off_add3 = db.Column(db.String(50))
    r_off_city = db.Column(db.SmallInteger)
    r_off_pin = db.Column(db.String(10))
    r_country_cd = db.Column(db.SmallInteger)
    r_state_cd = db.Column(db.SmallInteger)
    r_off_tel_no1 = db.Column(db.String(25))
    r_off_tel_no2 = db.Column(db.String(25))
    r_off_tel_no3 = db.Column(db.String(25))
    r_off_fax_no = db.Column(db.String(20))
    lst_no = db.Column(db.String(50))
    lst_dt = db.Column(db.Date)
    cst_no = db.Column(db.String(50))
    cst_dt = db.Column(db.Date)
    vat_no = db.Column(db.String(50))
    vat_dt = db.Column(db.Date)
    ex_reg_no = db.Column(db.String(50))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    cin_no = db.Column(db.String(25))
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    pan_no = db.Column(db.String(25))
    comp_license = db.Column(db.LargeBinary)
    logo_path = db.Column(db.LargeBinary)
    lite_cd = db.Column(db.LargeBinary)
    epps_type = db.Column(db.String(1))
    comp_level_doc_no_string = db.Column(db.String(5))

class EppsCurrencyMst(db.Model):
    __tablename__ = 'epps_currency_mst'
    __table_args__ = {'schema': 'epps_admin'}    
    comp_cd = db.Column(db.SmallInteger, primary_key=True)
    curr_cd = db.Column(db.SmallInteger, primary_key=True)
    curr_disp_name = db.Column(db.String(50))
    curr_long_name = db.Column(db.String(100))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    curr_unit_name = db.Column(db.String(20))
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    curr_rt_symbol = db.Column(db.String(5))
    curr_abbr = db.Column(db.String(3))
    curr_small_deno = db.Column(db.String(10))
    dflt_yn = db.Column(db.Integer)

class EppsSdCustomerMst(db.Model):
    __tablename__ = 'epps_sd_customer_mst'
    __table_args__ = {'schema': 'epps_sdms'} 
    comp_cd = db.Column(db.SmallInteger, primary_key=True)
    div_cd = db.Column(db.SmallInteger, primary_key=True)
    cust_cd = db.Column(db.Integer, primary_key=True)
    cust_disp_name = db.Column(db.String(50), nullable=True)
    cust_long_name = db.Column(db.String(100), nullable=True)
    cust_type = db.Column(db.String(50), nullable=True)
    credit_control_flag = db.Column(db.String(1), nullable=True)
    credit_days = db.Column(db.SmallInteger, nullable=True)
    credit_amt_limit = db.Column(db.Numeric(21, 2), nullable=True)
    cst_no = db.Column(db.String(40), nullable=True)
    cst_date = db.Column(db.Date, nullable=True)
    it_pa_no = db.Column(db.String(25), nullable=True)
    tin_no = db.Column(db.String(25), nullable=True)
    tin_date = db.Column(db.Date, nullable=True)
    buss_type = db.Column(db.String(50), nullable=True)
    supp_cd_link = db.Column(db.Integer, nullable=True)
    gl_cd = db.Column(db.Integer, nullable=True)
    sl_cd = db.Column(db.String(7), nullable=True)
    tds_flag = db.Column(db.String(1), nullable=True)
    firm_status = db.Column(db.String(50), nullable=True)
    deductee_cd = db.Column(db.String(50), nullable=True)
    cust_approved_yn = db.Column(db.String(1), nullable=True)
    regular_cust_flag = db.Column(db.String(1), nullable=True)
    cust_collection_catg = db.Column(db.String(50), nullable=True)
    cust_bus_zone_cd = db.Column(db.SmallInteger, nullable=True)
    old_customer_cd = db.Column(db.String(25), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True, default=datetime.utcnow)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True, default=datetime.utcnow, onupdate=datetime.utcnow)
    approved_by = db.Column(db.String(10), nullable=True)
    approved_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    cin_no = db.Column(db.String(25), nullable=True)
    file_upload_sr_no = db.Column(db.Integer, nullable=True)
    gst_registered = db.Column(db.String(1), nullable=True)
    gstin_no = db.Column(db.String(15), nullable=True)
    gstin_type = db.Column(db.String(3), nullable=True)
    cust_sc_cd = db.Column(db.Integer, nullable=True)
    mobile_no = db.Column(db.String(15), nullable=True)
    dob = db.Column(db.Date, nullable=True)
    dm_hdr_sr_no = db.Column(db.Integer, nullable=True)
    cust_remarks = db.Column(db.String(250), nullable=True)
    interest_rt = db.Column(db.Numeric(10, 2), nullable=True)
    ref_lead_hdr_sr_no = db.Column(db.Integer, nullable=True)
    cust_otp = db.Column(db.String(15), nullable=True)
    cust_ref_id = db.Column(db.String(100), nullable=True)
    client_upload_flag = db.Column(db.SmallInteger, nullable=True)
    service_partner_type = db.Column(db.String(50), nullable=True)
    cust_unid = db.Column(db.String(5), nullable=True)
    tcs_applicable_yn = db.Column(db.SmallInteger, nullable=True)
    show_disc_yn = db.Column(db.SmallInteger, nullable=True)
    cust_id_no = db.Column(db.String(30), nullable=True)
    pdc_flag = db.Column(db.String(1), nullable=True)
    cheque_no = db.Column(db.String(25), nullable=True)
    cheque_dt = db.Column(db.Date, nullable=True)
    amount = db.Column(db.Numeric(10, 2), nullable=True)
    pay_name = db.Column(db.String(50), nullable=True)
    tolerance_qty = db.Column(db.Numeric(10, 2), nullable=True)
    parent_cust_cd = db.Column(db.Integer, nullable=True)

    def __repr__(self):
        return f"EppsSdCustomerMst(comp_cd={self.comp_cd}, div_cd={self.div_cd}, cust_cd={self.cust_cd})"

class EppsLocationMst(db.Model):
    __tablename__ = 'epps_location_mst'
    __table_args__ = {'schema': 'epps_admin'} 
    comp_cd = db.Column(db.Integer, primary_key=True)
    div_cd = db.Column(db.SmallInteger, primary_key=True)
    loc_cd = db.Column(db.SmallInteger, primary_key=True)
    loc_disp_name = db.Column(db.String(50))
    loc_long_name = db.Column(db.String(100), nullable=True)
    add1 = db.Column(db.String(50))
    add2 = db.Column(db.String(50), nullable=True)
    add3 = db.Column(db.String(50), nullable=True)
    city_cd = db.Column(db.SmallInteger, nullable=True)
    pin = db.Column(db.String(10), nullable=True)
    country_cd = db.Column(db.SmallInteger)
    state_cd = db.Column(db.SmallInteger)
    tel_no1 = db.Column(db.String(15), nullable=True)
    tel_no2 = db.Column(db.String(15), nullable=True)
    fax_no1 = db.Column(db.String(20), nullable=True)
    fax_no2 = db.Column(db.String(20), nullable=True)
    website = db.Column(db.String(200), nullable=True)
    mail_id = db.Column(db.String(100), nullable=True)
    cst_no = db.Column(db.String(25), nullable=True)
    cst_dt = db.Column(db.Date, nullable=True)
    lst_no = db.Column(db.String(25), nullable=True)
    lst_dt = db.Column(db.Date, nullable=True)
    ex_reg_no = db.Column(db.String(25), nullable=True)
    ex_reg_dt = db.Column(db.Date, nullable=True)
    ex_range = db.Column(db.String(30), nullable=True)
    ex_div = db.Column(db.String(30), nullable=True)
    ex_comm = db.Column(db.String(30), nullable=True)
    ecc_no = db.Column(db.String(25), nullable=True)
    it_pan_no = db.Column(db.String(25), nullable=True)
    it_pan_dt = db.Column(db.Date, nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    vat_no = db.Column(db.String(25), nullable=True)
    vat_dt = db.Column(db.Date, nullable=True)
    service_tax_no = db.Column(db.String(25), nullable=True)
    service_tax_date = db.Column(db.DateTime, nullable=True)
    service_tax_commissioner = db.Column(db.String(50), nullable=True)
    service_tax_division = db.Column(db.String(25), nullable=True)
    service_tax_commessioner_cd = db.Column(db.String(25), nullable=True)
    iso_ref_doc_no = db.Column(db.String(100), nullable=True)
    iso_ref_doc_dt = db.Column(db.Date, nullable=True)
    manufacturing_loc_flag = db.Column(db.String(1), nullable=True)
    frt_zone_cd = db.Column(db.SmallInteger, nullable=True)
    ref_supp_cd = db.Column(db.Integer, nullable=True)
    ref_cust_cd = db.Column(db.Integer, nullable=True)
    excise_jurisdiction = db.Column(db.String(50), nullable=True)
    pla_no = db.Column(db.String(50), nullable=True)
    exc_license_type = db.Column(db.String(50), nullable=True)
    short_add_for_stickers = db.Column(db.String(100), nullable=True)
    gl_cd = db.Column(db.Integer, nullable=True)
    sl_cd = db.Column(db.String(7), nullable=True)
    loc_type = db.Column(db.String(50), nullable=True)
    costcenter_active = db.Column(db.String(1), nullable=True)
    foreign_currency_active = db.Column(db.String(1), nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    internal_posted_flag = db.Column(db.String(1), nullable=True)
    cv_pd_flag = db.Column(db.String(1), nullable=True)
    file_upload_sr_no = db.Column(db.Integer, nullable=True)
    group_location = db.Column(db.String(25), nullable=True)
    gst_registered = db.Column(db.String(1), nullable=True)
    gstin_no = db.Column(db.String(15), nullable=True)
    gstin_type = db.Column(db.String(2), nullable=True)
    gst_asp_token_id = db.Column(db.String(100), nullable=True)
    gst_asp_tax_id = db.Column(db.String(100), nullable=True)
    loc_category = db.Column(db.String(1), nullable=True)
    partner_cd = db.Column(db.String(10), nullable=True)
    eway_auto_yn = db.Column(db.String(1), nullable=True)
    eway_gsp_app_name = db.Column(db.String(15), nullable=True)
    eway_gsp_environment = db.Column(db.String(15), nullable=True)
    eway_gsp_client_id = db.Column(db.String(100), nullable=True)
    eway_gsp_client_secret = db.Column(db.String(100), nullable=True)
    eway_gsp_created_by = db.Column(db.String(100), nullable=True)
    eway_nic_user_name = db.Column(db.String(100), nullable=True)
    eway_nic_password = db.Column(db.String(100), nullable=True)
    loc_level_doc_no_string = db.Column(db.String(5), nullable=True)
    tan_no = db.Column(db.String(10), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    client_id = db.Column(db.String(50), nullable=True)
    client_secret = db.Column(db.String(100), nullable=True)
    e_inv_user_name = db.Column(db.String(50), nullable=True)
    einv_password = db.Column(db.String(50), nullable=True)
    public_key = db.Column(db.LargeBinary, nullable=True)
    token_valid_time = db.Column(db.String(25), nullable=True)
    e_inv_token_id = db.Column(db.String(500), nullable=True)
    e_inv_appkey = db.Column(db.LargeBinary, nullable=True)
    e_inv_sek = db.Column(db.String(1000), nullable=True)
    bonded_wh = db.Column(db.SmallInteger, nullable=True)
    parent_loc_cd = db.Column(db.SmallInteger, nullable=False)
    un_id = db.Column(db.String(5), nullable=True)
    budget_center_flag = db.Column(db.SmallInteger, nullable=True, comment='Use 0 for No, use 1 for Yes')
    pfx_sign = db.Column(db.LargeBinary, nullable=True)
    ref_loc_cd = db.Column(db.String(4), nullable=True)

    __table_args__ = (
        db.UniqueConstraint('comp_cd', 'div_cd', 'loc_cd', name='_comp_div_loc_uc'),
        db.UniqueConstraint('comp_cd', 'div_cd', 'loc_disp_name', name='_comp_div_loc_disp_name_uc'),
    )

    def __repr__(self):
        return f"EppsLocationMst(comp_cd={self.comp_cd}, div_cd={self.div_cd}, loc_cd={self.loc_cd})"

class EppsWebNotificationPool(db.Model):
    __tablename__ = 'epps_web_notification_pool'
    __table_args__ = {'schema': 'epps_admin'} 
    web_noti_hdr_sr_no = db.Column(db.Integer, primary_key=True)
    comp_cd = db.Column(db.SmallInteger)
    div_cd = db.Column(db.SmallInteger)
    loc_cd = db.Column(db.SmallInteger)
    noti_header = db.Column(db.String(100))
    noti_string = db.Column(db.String(300))
    ecode = db.Column(db.String(5))
    module_id = db.Column(db.String(6), nullable=True)
    tran_indicator = db.Column(db.String(20), nullable=True)
    doc_hdr_sr_no = db.Column(db.Integer)
    prog_cd = db.Column(db.Integer, nullable=True)
    prog_id = db.Column(db.String(40), nullable=True)
    role_cd = db.Column(db.SmallInteger, nullable=True)
    emp_cd = db.Column(db.String(50), nullable=True)
    noti_status = db.Column(db.SmallInteger)
    noti_type = db.Column(db.String(50))
    noti_date = db.Column(db.DateTime, nullable=True)
    session_id = db.Column(db.Integer, nullable=True)
    prog_disp_name = db.Column(db.String(50), nullable=True)
    tran_ind_type = db.Column(db.String(50), nullable=True)
    fin_yr = db.Column(db.SmallInteger, nullable=True)
    transaction_stage = db.Column(db.SmallInteger, nullable=True)

    def __repr__(self):
        return f"EppsWebNotificationPool(web_noti_hdr_sr_no={self.web_noti_hdr_sr_no}, noti_header={self.noti_header})"


class EppsDeptMst(db.Model):
    __tablename__ = 'epps_dept_mst'
    __table_args__ = {'schema': 'epps_admin'} 
    comp_cd = db.Column(db.Integer, ForeignKey('epps_company_mst.comp_cd'), primary_key=True)
    dept_cd = db.Column(db.SmallInteger, primary_key=True)
    dept_disp_name = db.Column(db.String(50), unique=True)
    dept_long_name = db.Column(db.String(100))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime, default=datetime.utcnow)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    default_fas_dept = db.Column(db.String(1))
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    dept_type = db.Column(db.String(10))

class EppsDivisionMst(db.Model):
    __tablename__ = 'epps_division_mst'
    __table_args__ = {'schema': 'epps_admin'}
    
    comp_cd = db.Column(db.Integer, ForeignKey('epps_city_mst.comp_cd'), primary_key=True)
    div_cd = db.Column(db.SmallInteger, primary_key=True)
    div_disp_name = db.Column(db.String(50), unique=True)
    div_long_name = db.Column(db.String(100))
    add1 = db.Column(db.String(50))
    add2 = db.Column(db.String(50))
    add3 = db.Column(db.String(50))
    city_cd = db.Column(db.SmallInteger)
    pin = db.Column(db.String(10))
    country_cd = db.Column(db.SmallInteger)
    state_cd = db.Column(db.SmallInteger)
    tel_no1 = db.Column(db.String(25))
    tel_no2 = db.Column(db.String(25))
    fax_no1 = db.Column(db.String(25))
    fax_no2 = db.Column(db.String(25))
    website = db.Column(db.String(100))
    mail_id = db.Column(db.String(100))
    cst_no = db.Column(db.String(25))
    cst_dt = db.Column(db.Date)
    lst_no = db.Column(db.String(25))
    lst_dt = db.Column(db.Date)
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime, default=datetime.utcnow)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    loc_disp_name = db.Column(db.String(50))
    loc_cd = db.Column(db.SmallInteger)
    dept_cd = db.Column(db.SmallInteger)
    file_upload_sr_no = db.Column(db.Integer)
    pan_no = db.Column(db.String(25))
    cin_no = db.Column(db.String(25))
    import_licence_no = db.Column(db.String(25))
    importers_code = db.Column(db.String(25))
    gst_config_flag = db.Column(db.String(25))
    logo_path = db.Column(db.LargeBinary)
    gst_app_from_dt = db.Column(db.Date)
    gst_composite_scheme = db.Column(db.String(1))
    gst_asp_tax_id = db.Column(db.String(100))
    gst_asp_token_id = db.Column(db.String(100))
    div_as_comp = db.Column(db.String(1))
    div_level_doc_no_string = db.Column(db.String(5))
    address_print_flag = db.Column(db.String(1))
    iso_no = db.Column(db.String(25))


class VAuditTrailYn(db.Model):
    __tablename__ = 'v_audit_trail_yn'
    __table_args__ = {'schema': 'public'}

    audit_trail_yn = db.Column(db.String(1), primary_key=True,nullable=False, server_default='Y', info={'choices': ['Y', 'N']})

class EppsFinyrMst(db.Model):
    __tablename__ = 'epps_finyr_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.Integer, db.ForeignKey('epps_company_mst.comp_cd'), primary_key=True)
    fin_yr = db.Column(db.SmallInteger, primary_key=True)
    fin_desc = db.Column(db.String(10))
    dflt_yn = db.Column(db.String(1), nullable=True)
    from_dt = db.Column(db.Date)
    to_dt = db.Column(db.Date)
    doc_no_string = db.Column(db.String(5))
    allow_qry_yn = db.Column(db.String(1), nullable=True)
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime, default=datetime.utcnow)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True, onupdate=datetime.utcnow)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    
    # Define relationships if necessary
    # company = db.relationship("EppsCompanyMst")

    def __repr__(self):
        return f"<EppsFinyrMst(comp_cd={self.comp_cd}, fin_yr={self.fin_yr}, fin_desc={self.fin_desc})>"


class EppsMmGroupMst(db.Model):
    __tablename__ = 'epps_mm_group_mst'
    __table_args__ = {'schema': 'epps_mms'}

    comp_cd = db.Column(db.SmallInteger, primary_key=True)
    grp_cd = db.Column(db.SmallInteger, primary_key=True)
    grp_disp_name = db.Column(db.String(50))
    grp_long_name = db.Column(db.String(100))
    mnt_grp_flag = db.Column(db.String(1), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    group_type = db.Column(db.String(1), nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    grp_ref_cd = db.Column(db.String(15), nullable=True)
    group_unid = db.Column(db.String(5), nullable=True)

    # Define any relationships if needed
    # Example:
    # other_table = db.relationship('OtherTable', backref='epps_mm_group_mst')

    def __repr__(self):
        return f'<EppsMmGroupMst comp_cd={self.comp_cd}, grp_cd={self.grp_cd}>'

class EppsMmItemMst(db.Model):
    __tablename__ = 'epps_mm_item_mst'
    __table_args__ = {'schema': 'epps_mms'}
    comp_cd = db.Column(db.Integer, primary_key=True)
    grp_cd = db.Column(db.SmallInteger)
    grs_cd = db.Column(db.ForeignKey('epps_mm_sub_group_mst.grs_cd', ondelete='RESTRICT', onupdate='CASCADE'))
    grss_cd = db.Column(db.SmallInteger)
    itemcode = db.Column(db.String(40), primary_key=True)
    item_disp_name = db.Column(db.String(100))
    item_long_name = db.Column(db.String(200))

    item_category = db.Column(db.String(50))
    excise_ch_no = db.Column(db.String(20))
    custom_trf_no = db.Column(db.String(20))
    xx_supp_itemcode = db.Column(db.String(40))
    mfch_draw_no = db.Column(db.String(50))
    issue_uom = db.Column(db.Integer)
    re_usable = db.Column(db.String(1))
    rotable_prefix = db.Column(db.String(10))
    uom_conv_factor = db.Column(db.Numeric)
    generate_batch_yn = db.Column(db.String(1))
    docno_logic = db.Column(db.String(50))
    manufacturing_item_flag = db.Column(db.String(1))
    ccg_cd = db.Column(db.Integer)
    formula_type = db.Column(db.String(50))
    prod_remarks = db.Column(db.String(1000))
    ref_itemcode = db.Column(db.String(40))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    gl_cd = db.Column(db.Integer)
    sl_cd = db.Column(db.String(7))
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    article_no = db.Column(db.String(15))
    design_no = db.Column(db.String(50))
    drawing_no = db.Column(db.String(15))
    tolerance_in_days = db.Column(db.Numeric)
    tolerance_type = db.Column(db.String)
    age_in_days = db.Column(db.Numeric)
    item_height_uom = db.Column(db.Integer)
    item_height = db.Column(db.Numeric)
    item_length2_uom = db.Column(db.Integer)
    item_length2 = db.Column(db.Numeric)
    item_length1_uom = db.Column(db.Integer)
    item_length1 = db.Column(db.Numeric)
    item_thick_uom = db.Column(db.Integer)
    item_thick = db.Column(db.Numeric)
    item_width_uom = db.Column(db.Integer)
    item_width = db.Column(db.Numeric)
    item_size = db.Column(db.String(25))
    item_color = db.Column(db.String(25))
    global_itemcode = db.Column(db.String(50))
    item_barcode = db.Column(db.String(25))
    item_rt = db.Column(db.Numeric)
    item_mrp_rate = db.Column(db.Numeric)
    file_upload_sr_no = db.Column(db.Integer)
    batch_selection4inv = db.Column(db.String(1))
    valuation_type = db.Column(db.String(20))
    lbl_sr_no = db.Column(db.Integer)
    wt_conv_factor = db.Column(db.Numeric)
    split_no_of_pcs = db.Column(db.String(1))
    item_classification_type = db.Column(db.String(50))
    tolerance_qty = db.Column(db.Numeric)
    batch_selection4iss = db.Column(db.String(1))
    brand_disp_name = db.Column(db.String(100))
    age_sel_criteria = db.Column(db.String(25))
    hsn_sac_cd = db.Column(db.String(15))
    brand_code = db.Column(db.ForeignKey('epps_mm_item_brand_mst.brand_code', ondelete='RESTRICT', onupdate='CASCADE'))
    cgst_rt = db.Column(db.Numeric)
    sgst_rt = db.Column(db.Numeric)
    igst_rt = db.Column(db.Numeric)
    utgst_rt = db.Column(db.Numeric)
    cess_rt = db.Column(db.Numeric)
    x_from_dt = db.Column(db.Date)
    to_dt = db.Column(db.Date)
    sale_item_rt = db.Column(db.Numeric(21, 2))
    item_warranty = db.Column(db.SmallInteger)
    batch_no_logic = db.Column(db.String(35))
    gst_applicable = db.Column(db.String(1))
    batch_logic = db.Column(db.String(25))
    tran_used_yn = db.Column(db.String(1))
    item_access_level = db.Column(db.SmallInteger)
    scrap_val_flag = db.Column(db.String(1))
    scrap_nrv_val = db.Column(db.Numeric)
    pack_size = db.Column(db.Numeric)
    approved_yn = db.Column(db.SmallInteger)
    catch_weight = db.Column(db.Numeric)
    catch_weight_uom = db.Column(db.Integer)
    approved_by = db.Column(db.String(10))
    approved_dt = db.Column(db.DateTime)
    item_drawing_path = db.Column(db.String(50))
    grn_rt_change_yn = db.Column(db.SmallInteger)
    wa_part_grp_cd = db.Column(db.Integer)
    wa_equip_grp_cd = db.Column(db.Integer)
    bin_indicator = db.Column(db.String(1))
    pack_size_type = db.Column(db.SmallInteger)
    pack_tolerance = db.Column(db.String(1))
    pack_tolerance_value = db.Column(db.Integer)
    version_no = db.Column(db.String(5))
    duty_drawback = db.Column(db.Numeric)
    copy_from_itemcode = db.Column(db.String(40))
    no_of_loops = db.Column(db.Integer)
    inv_rt_editable_yn = db.Column(db.SmallInteger)
    wt_bal_tolerance_yn = db.Column(db.SmallInteger)
    attribute_active_yn = db.Column(db.SmallInteger)
    batch_selection4pos = db.Column(db.SmallInteger)
    product_cd = db.Column(db.String(10))
    # parent_itemcode = db.Column(db.Text)
    # parent_itemcode = db.Column(db.String(40))

    def __repr__(self):
        return f"<EppsMmItemMst(itemcode='{self.itemcode}')>"

class EppsStateMst(db.Model):
    __tablename__ = 'epps_state_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.Integer, primary_key=True)
    country_cd = db.Column(db.SmallInteger, primary_key=True)
    state_cd = db.Column(db.SmallInteger, primary_key=True)
    state_nm = db.Column(db.String(50))
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10))
    updated_dt = db.Column(db.DateTime)
    terminal_id = db.Column(db.String(100))
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger)
    updator_role_cd = db.Column(db.SmallInteger)
    gst_state_cd = db.Column(db.String(3))
    gstin_type = db.Column(db.String(3))
    gstin_state_abbr = db.Column(db.String(10))

class EppsMiscMst(db.Model):
    __tablename__ = 'epps_misc_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.SmallInteger, db.ForeignKey('epps_company_mst.comp_cd'), primary_key=True)
    misc_sr_no = db.Column(db.Integer, primary_key=True)
    misc_misc_cd = db.Column(db.String(50))
    misc_misc_name = db.Column(db.String(100))
    parent_misc_cd = db.Column(db.Integer, nullable=True)
    epps_only_flag = db.Column(db.String(1), nullable=True)
    misc_value = db.Column(db.String(50), nullable=True)
    remarks = db.Column(db.String(500), nullable=True)
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime, default=datetime.utcnow)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    misc_type = db.Column(db.String(50), nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    module_id = db.Column(db.String(6), nullable=True)
    operation_done = db.Column(db.String(50), nullable=True)
    insert_allow = db.Column(db.String(1), nullable=True)

    # Define the relationship with EppsCompanyMst
    # company = db.relationship('EppsCompanyMst', backref='epps_misc_mst', lazy=True)

    # def __repr__(self):
    #     return f'<EppsMiscMst {self.misc_misc_name}>'



class EppsModuleMst(db.Model):
    __tablename__ = 'epps_module_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.SmallInteger, primary_key=True)
    module_id = db.Column(db.String(6))
    module_disp_name = db.Column(db.String(50), unique=True, nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    created_by = db.Column(db.String(10))
    created_dt = db.Column(db.DateTime)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    module_disp_seq_no = db.Column(db.SmallInteger, nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    default_access = db.Column(db.SmallInteger, nullable=True)
    display_yn = db.Column(db.String(1), nullable=True)

class EppsProgMst(db.Model):
    __tablename__ = 'epps_prog_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.Integer, primary_key=True)
    prog_cd = db.Column(db.Integer)
    prog_id = db.Column(db.String(40), nullable=True)
    prog_disp_name = db.Column(db.String(100))
    prog_long_name = db.Column(db.String(2000), nullable=True)
    prog_type = db.Column(db.String(1))
    parent_id = db.Column(db.Integer, nullable=True)
    module_id = db.Column(db.String(6), nullable=True)
    tran_indicator = db.Column(db.String(20), nullable=True)
    prog_mtqr_flag = db.Column(db.String(1), nullable=True)
    rep_type = db.Column(db.String(1), nullable=True)
    menu_pass_parameter = db.Column(db.String(50), nullable=True)
    prog_report_name = db.Column(db.String(50), nullable=True)
    prog_menu_display_yn = db.Column(db.String(1), nullable=True)
    prog_disp_seq_no = db.Column(db.SmallInteger, nullable=True)
    prog_app_flag = db.Column(db.String(1), nullable=True)
    default_access_flag = db.Column(db.String(1), nullable=True)
    epps_admin_flag = db.Column(db.String(1), nullable=True)
    mwa_flag = db.Column(db.String(1), nullable=True)
    mob_disp_name = db.Column(db.String(50), nullable=True)
    mob_sub_menu_flag = db.Column(db.String(1), nullable=True)
    mob_menu_pass_para = db.Column(db.String(30), nullable=True)
    screen_role_flag = db.Column(db.String(25), nullable=True)
    prog_doc_id = db.Column(db.String(25), nullable=True)
    prog_developed_by = db.Column(db.String(10), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    rep_max_days = db.Column(db.Integer, nullable=True)
    report_description = db.Column(db.String(250), nullable=True)
    session_req_yn = db.Column(db.String(1), nullable=True)
    approval_flag = db.Column(db.String, nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    prog_tree_del_flag = db.Column(db.String(15), nullable=True)
    mob_ecs_flag = db.Column(db.String(1), nullable=True)
    allow_excel_down_yn = db.Column(db.String(1), nullable=True)
    noti_config_yn = db.Column(db.String(1), nullable=True)
    java_notification_cls_name = db.Column(db.String(100), nullable=True)
    rep_disp_name = db.Column(db.String(100), nullable=True)
    multi_screen_yn = db.Column(db.SmallInteger, nullable=True)
    db_ct_type = db.Column(db.String(1), nullable=True)
    dt_param_type = db.Column(db.String(1), nullable=True)
    view_disp_name = db.Column(db.String(30), nullable=True)
    view_entity_name = db.Column(db.String(500), nullable=True)

    __table_args__ = (
        db.UniqueConstraint('comp_cd', 'prog_cd'),
    )


class EppsRoleProgLnk(db.Model):
    comp_cd = db.Column(db.Integer, db.ForeignKey('epps_prog_mst.comp_cd'), primary_key=True)
    div_cd = db.Column(db.SmallInteger)
    role_cd = db.Column(db.SmallInteger)
    prog_cd = db.Column(db.Integer, db.ForeignKey('epps_prog_mst.prog_cd'))
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    insert_flag = db.Column(db.String(1), nullable=True)
    update_flag = db.Column(db.String(1), nullable=True)
    delete_flag = db.Column(db.String(1), nullable=True)
    query_flag = db.Column(db.String(1), nullable=True)
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)

    epps_prog_mst = db.relationship('EppsProgMst', foreign_keys=[comp_cd, prog_cd])
    
    __tablename__ = 'epps_role_prog_lnk'
    __table_args__ = (
        db.ForeignKeyConstraint(['comp_cd', 'prog_cd'], ['epps_prog_mst.comp_cd', 'epps_prog_mst.prog_cd']),
    )


class EppsRoleMst(db.Model):
    __tablename__ = 'epps_role_mst'
    __table_args__ = {'schema': 'epps_admin'}
    id = db.Column(db.Integer, primary_key=True)
    comp_cd = db.Column(db.Integer, ForeignKey('epps_division_mst.comp_cd'))
    div_cd = db.Column(db.SmallInteger)
    role_cd = db.Column(db.SmallInteger)
    role_disp_name = db.Column(db.String(50), nullable=True)
    role_long_name = db.Column(db.String(50), nullable=True)
    role_parent_role = db.Column(db.SmallInteger, nullable=True)
    role_type = db.Column(db.String(50), nullable=True)
    role_disp_seq_no = db.Column(db.SmallInteger, nullable=True)
    sys_admin_flag = db.Column(db.String(1), nullable=True)
    role_id = db.Column(db.String(50), nullable=True)
    per_item_limit = db.Column(db.DECIMAL(21, 2), nullable=True)
    per_transaction_limit = db.Column(db.DECIMAL(21, 2), nullable=True)
    created_by = db.Column(db.String(10), nullable=False)
    created_dt = db.Column(db.DateTime, nullable=False)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    role_exp_app_flag = db.Column(db.String(1), nullable=False)
    ref_role_id = db.Column(db.String(10), nullable=True)
    hr_admin_flag = db.Column(db.SmallInteger, nullable=True)
    default_yn = db.Column(db.SmallInteger, nullable=True)

    # Define a relationship to EppsDivisionMst
    # division = relationship("EppsDivisionMst", back_populates="roles")

    def __repr__(self):
        return f"<EppsRoleMst(id={self.id}, role_cd={self.role_cd}, comp_cd={self.comp_cd})>"


class EppsStageMst(db.Model):
    __tablename__ = 'epps_stage_mst'
    __table_args__ = {'schema': 'epps_admin'}
    comp_cd = db.Column(db.Integer, db.ForeignKey('epps_tran_indicator.comp_cd'), primary_key=True)
    ti_code = db.Column(db.String(20), primary_key=True)
    stage_cd = db.Column(db.SmallInteger, primary_key=True)
    stage_desc = db.Column(db.String(20))
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    module_id = db.Column(db.String(6), nullable=True)


class EppsMmSubGroupMst(db.Model):
    __tablename__ = 'epps_mm_sub_group_mst'
    __table_args__ = {'schema': 'epps_mms'}
    comp_cd = db.Column(db.Integer, db.ForeignKey('epps_mm_group_mst.comp_cd'), primary_key=True)
    grp_cd = db.Column(db.SmallInteger, primary_key=True)
    grs_cd = db.Column(db.SmallInteger, primary_key=True)
    grs_disp_name = db.Column(db.String(50))
    grs_long_name = db.Column(db.String(100))
    mnt_grp_flag = db.Column(db.String(1), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    grs_ref_cd = db.Column(db.String(15), nullable=True)
    sub_group_unid = db.Column(db.String(5), nullable=True)

class EppsMmSubSubGroupMst(db.Model):
    __tablename__ = 'epps_mm_sub_sub_group_mst'
    __table_args__ = {'schema': 'epps_mms'}
    comp_cd = db.Column(db.SmallInteger, primary_key=True)
    grp_cd = db.Column(db.SmallInteger)
    grs_cd = db.Column(db.SmallInteger, db.ForeignKey('epps_mm_sub_group_mst.grs_cd'))
    grss_cd = db.Column(db.SmallInteger)
    grs_disp_name = db.Column(db.String(50))
    grs_long_name = db.Column(db.String(100))
    mnt_grp_flag = db.Column(db.String(1), nullable=True)
    created_by = db.Column(db.String(10), nullable=True)
    created_dt = db.Column(db.DateTime, nullable=True)
    updated_by = db.Column(db.String(10), nullable=True)
    updated_dt = db.Column(db.DateTime, nullable=True)
    terminal_id = db.Column(db.String(100), nullable=True)
    active_yn = db.Column(db.String(1), nullable=False, server_default='Y', info={'choices': ['Y', 'N']})
    creator_role_cd = db.Column(db.SmallInteger, nullable=True)
    updator_role_cd = db.Column(db.SmallInteger, nullable=True)
    grss_ref_cd = db.Column(db.String(15), nullable=True)
    sub_sub_group_unid = db.Column(db.String(5), nullable=True)

    # __tablename__ = 'epps_mm_sub_sub_group_mst'
    # __table_args__ = (
    #     db.UniqueConstraint('comp_cd', 'grp_cd', 'grs_cd', 'grss_cd'),
    # )
